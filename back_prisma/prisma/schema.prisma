// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(30)
  password  String    @db.VarChar(200)
  nickname  String    @unique @db.VarChar(30)
  createdAt DateTime  @default(now())
  updateAt  DateTime? @updatedAt

  follower  User[]    @relation("UserFollow", references: [id])
  following User[]    @relation("UserFollow", references: [id])
  posts     Post[]
  comments  Comment[]
  liker     Like[]

  @@map(name: "users")
}

model Post {
  id              Int      @id @default(autoincrement())
  content         String   @db.Text
  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt
  author          User     @relation(fields: [userId], references: [id])
  userId          Int
  retweetedPost   Post?    @relation("Retweet", fields: [retweetedPostId], references: [id])
  retweetedPostId Int?

  retweeterPost Post[]       @relation("Retweet")
  comments      Comment[]
  images        Image[]
  hashtags      PostHastag[]
  liker         Like[]

  @@map(name: "posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  commenter   User @relation(fields: [userId], references: [id])
  postComment Post @relation(fields: [postId], references: [id])

  userId Int
  postId Int

  @@map(name: "commets")
}

model Image {
  id        Int      @id @default(autoincrement())
  src       String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  postImage Post @relation(fields: [postId], references: [id])
  postId    Int

  @@map(name: "images")
}

model Hashtag {
  id        Int          @id @default(autoincrement())
  name      String       @db.VarChar(20)
  createdAt DateTime     @default(now())
  updateAt  DateTime     @updatedAt
  posts     PostHastag[]

  @@map(name: "hastages")
}

model PostHastag {
  post      Post     @relation(fields: [postId], references: [id])
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id])
  postId    Int
  hashtagId Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@id([postId, hashtagId])
  @@map(name: "posthastags")
}

model Like {
  user   User @relation(fields: [userId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
  postId Int
  userId Int

  @@id([postId, userId])
  @@map(name: "like")
}
